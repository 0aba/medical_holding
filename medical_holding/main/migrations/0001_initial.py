# Generated by Django 5.1.6 on 2025-02-23 15:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import main.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, default='default/avatar.jpg', upload_to='avatars/%Y/%m/%d/', validators=[main.models.validate_file_size_2mb, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='Аватар')),
                ('background', models.ImageField(blank=True, default='default/background.jpg', upload_to='backgrounds/%Y/%m/%d/', validators=[main.models.validate_file_size_4mb, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='Фон профиля')),
                ('about', models.TextField(blank=True, default='', max_length=1024, verbose_name='О себе')),
                ('first_name', models.CharField(blank=True, default='', max_length=256, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, default='', max_length=256, verbose_name='Фамилия')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('W', 'Женский'), ('N', 'Не указан')], default='N', max_length=2, verbose_name='Пол')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('phone', models.CharField(blank=True, default='', max_length=16, validators=[django.core.validators.RegexValidator('^\\d{6,16}$', 'Номер телефона число от 6 до 16 цифр.')], verbose_name='Номер телефона')),
                ('email', models.EmailField(max_length=254, verbose_name='Почта')),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('is_online', models.BooleanField(default=False)),
                ('banned', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True, verbose_name='Название')),
                ('logo', models.ImageField(default='default/avatar_organization.jpg', upload_to='avatars/%Y/%m/%d/', validators=[main.models.validate_file_size_2mb, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='Логотип')),
                ('about', models.CharField(blank=True, default='', max_length=1024, verbose_name='Об организации')),
                ('site', models.URLField(blank=True, default='', max_length=1024, verbose_name='Сайт')),
                ('inn', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator('^\\d{10,12}$', 'ИНН должен содержать от 10 до 12 цифр.')], verbose_name='ИНН')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='owner_organization_fk', to=settings.AUTH_USER_MODEL, verbose_name='Владелец организации')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
            },
        ),
        migrations.CreateModel(
            name='EmployeeOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(default='default/employee.jpg', upload_to='photos/%Y/%m/%d/', verbose_name='Аватар')),
                ('number_in_med_registry', models.CharField(max_length=128, unique=True, verbose_name='Номер в медецинском реестре')),
                ('experience_month', models.PositiveSmallIntegerField(default=0, verbose_name='Опыт в месяцах')),
                ('first_name', models.CharField(max_length=256, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=256, verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=256, verbose_name='Отчество')),
                ('qualification', models.CharField(max_length=512, verbose_name='Квалификация')),
                ('gender', models.CharField(choices=[('M', 'Мужской'), ('W', 'Женский'), ('N', 'Не указан')], default='N', max_length=2, verbose_name='Пол')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='organization_employee_fk', to='main.organization', verbose_name='Сотрудник организации')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
        ),
        migrations.CreateModel(
            name='BranchOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(max_length=512, verbose_name='Улица')),
                ('house', models.PositiveSmallIntegerField(verbose_name='Дом')),
                ('phone', models.CharField(blank=True, default='', max_length=16, validators=[django.core.validators.RegexValidator('^\\d{6,16}$', 'Номер телефона число от 6 до 16 цифр.')], verbose_name='Номер телефона')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='organization_branch_fk', to='main.organization', verbose_name='Филиал организации')),
            ],
            options={
                'verbose_name': 'Филиал',
                'verbose_name_plural': 'Филиалы',
            },
        ),
        migrations.CreateModel(
            name='ServiceOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_service', models.CharField(max_length=512, verbose_name='Название услуги')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('appointment_start_time', models.TimeField(verbose_name='Время начала приемов')),
                ('appointment_end_time', models.TimeField(verbose_name='Время конца приемов')),
                ('appointment_interval', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(5, message='Минимальный интервал 5 минут')], verbose_name='Интервал записей')),
                ('amount_days_for_registration', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1, message='Минимум дней на оформление вперед это 1 день'), django.core.validators.MaxValueValidator(14, message='Максимум на перед можно оформить только на 2 недели вперед')], verbose_name='На сколько вперед дней можно оформить')),
                ('additional_information', models.CharField(blank=True, max_length=1024, verbose_name='Дополнительная информация')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='branch_organization_fk', to='main.branchorganization', verbose_name='Где будет проходить')),
                ('employee', models.ManyToManyField(related_name='employee_organization_fk', to='main.employeeorganization', verbose_name='Сотрудники, которые могут выполнять услугу')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='RatingService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='Оценка')),
                ('user_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_grade_fk', to=settings.AUTH_USER_MODEL, verbose_name='Оценка пользователя')),
                ('rating_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_service_fk', to='main.serviceorganization', verbose_name='Оцениваемый товар')),
            ],
            options={
                'verbose_name': 'Оценки',
                'verbose_name_plural': 'Оценка',
            },
        ),
        migrations.CreateModel(
            name='CommentAboutService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('is_change', models.BooleanField(default=False, verbose_name='Изменен')),
                ('text', models.CharField(max_length=1024, verbose_name='Текст комментария')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('wrote', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='wrote_comment_fk', to=settings.AUTH_USER_MODEL, verbose_name='Кто написал')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='service_comment_fk', to='main.serviceorganization', verbose_name='Комментарий к услуге')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='AppointmentDoctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_service', models.CharField(max_length=512, verbose_name='Название услуги')),
                ('date_time_appointment', models.DateTimeField(verbose_name='Время и дата приема')),
                ('price_appointment', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена за прием')),
                ('first_name_specialist', models.CharField(max_length=256, verbose_name='Имя доктора')),
                ('last_name_specialist', models.CharField(max_length=256, verbose_name='Фамилия доктора')),
                ('middle_name_specialist', models.CharField(max_length=256, verbose_name='Отчество доктора')),
                ('qualification_specialist', models.CharField(max_length=512, verbose_name='Квалификация доктора')),
                ('street_branch', models.CharField(max_length=512, verbose_name='Улица')),
                ('house_branch', models.PositiveSmallIntegerField(verbose_name='Дом')),
                ('who_purchased', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='who_purchased_fk', to=settings.AUTH_USER_MODEL, verbose_name='Приобрел услугу')),
                ('who_provides', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='who_provides_fk', to='main.employeeorganization', verbose_name='Кто оказал услугу')),
                ('service_now', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='service_now_fk', to='main.serviceorganization', verbose_name='Ссылка на услугу сейчас')),
            ],
            options={
                'verbose_name': 'Прием',
                'verbose_name_plural': 'Приемы',
                'ordering': ['-date_time_appointment'],
            },
        ),
        migrations.AddConstraint(
            model_name='branchorganization',
            constraint=models.CheckConstraint(condition=models.Q(('house__gt', 0)), name='house_not_zero_CK'),
        ),
        migrations.AddConstraint(
            model_name='serviceorganization',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='price_CK'),
        ),
        migrations.AddConstraint(
            model_name='ratingservice',
            constraint=models.CheckConstraint(condition=models.Q(('grade__gte', 0.0), ('grade__lte', 5.0)), name='grade_CK'),
        ),
        migrations.AlterUniqueTogether(
            name='ratingservice',
            unique_together={('rating_service', 'user_grade')},
        ),
        migrations.AddConstraint(
            model_name='appointmentdoctor',
            constraint=models.CheckConstraint(condition=models.Q(('price_appointment__gte', 0)), name='price_appointment_CK'),
        ),
        migrations.AddConstraint(
            model_name='appointmentdoctor',
            constraint=models.CheckConstraint(condition=models.Q(('house_branch__gt', 0)), name='house_branch_not_zero_CK'),
        ),
    ]
